extends layout

block content
    ui-slides



        ui-slide.title(notes=".notes li")
            article
                div
                    h1
                        | RessDriven
                        span  WebPonents
                    h2
                        | responsive design + server
                        | side components + web components
                    p
                        | Filipe Araujo
                        span  Senior Lead Consultant
                        span  Sungard
            ul.notes
                li Hello everyone, I'm Filipe Araujo and we are going to be talking about RessDriven WebPonents
                li And I am Senior Lead Consultant for Sungard
                li I've done alot of work in the media and financial space and I am currently consulting for Comcast





        ui-slide.topics(backdrop="false", background="false", items=".items li", items-fx="fade", vcenter="true", notes=".notes li")
            article
                ul.items
                    li  Responsive Design
                    li  RESS
                    li  Web Components

                ul.notes
                    li This talk isn't about implementation but theory and idea behind responsive design, ress systems and web components.
                        |  So I have broken this talk down into 3 parts.
                        |  The first being responsive design, where we will go over how responsive design came from and how its changed over the past 3 years.
                        |  Next, RESS systems an how responsive design can be implmented on the server, delivering unique experiences to devices.
                        |  And finally web components, a new web standards allowing for the syndication of components.
                    li work in progress demo





        ui-slide.topics(backdrop="false", background="false", items="li.scale", vcenter="true")
            article
                ul
                    li.scale Responsive Design
                    li.faded RESS
                    li.faded Web Components





        ui-slide.responsive-design(notes=".notes li")
            hgroup
                h3 Responsive Design
                    span 2010
            article
                blockquote
                    p
                        | "
                        b Flexible grid layout
                        |  with
                        b  flexible images
                        |  that incorporates
                        b  media queries
                        |  to create a responsive, adaptive layout."
                    footer
                        p  - Ethan Marcotte
                img(data-src="images/responsive-web.png", title="Responsive Web")
                ul.notes
                    li In 2010 Ethan Marcotte coined the term responsive design.
                        |  He presented the idea that web had been limited by print paradigms and if you take a flexible layout with flexible images and you wrap media queries around it, you can deliver an experience tailored for a specific device resolution




        ui-slide.responsive-now(items=".item, .item2, .item3", notes=".notes li")
            hgroup
                h3 Responsive Design
                    span NOW
            article
                ul.list
                    li.item media queries
                    li.item flexible layouts
                    li.item3.flexible
                        span.item flexible images
                        span.item2.orange  &amp; video
                        span.hidden.orange flexible media
                    li.item3.orange scalable typography
                    li.item3.orange content choreography
                    li.item3.orange feature detection
                    li.item3.orange feature polyfill &amp; omission
                ul.notes
                    li And over the last 3 years media queries, flexibles layouts and flexible images have changed web design and development.
                    li  But now, we are starting to realize there is much much more.
                    li  Flexible images were just a portion, we needed flexible video or flexible media for that matter.
                    li  And then we realized typography needs to scale for better accessibility.
                    li  And with that content order became important, do we really need the full navigation at the top on mobile?
                    li  How about features? How can we tell if a device supports it? do we polyfill or omit?
                footer




        ui-slide(notes=".note", items=".item", notes=".notes li")
            hgroup
                h3 Responsive Design
                    span IS HARD!
            article
                ul.list
                    li.item endless browser/device matrix
                    li.item device labs can be expensive
                    li.item delays in browser implementation
                    li.item delays in standardization
                    li.item non-evergreen browsers
                ul.notes
                    li And the truth is that responsive design is difficult.  With new devices being invented everyday, we are working with endless browser/device matrix.
                        |  An endless matrix that we have to pay for with development time and financially
                        |  And within each of those devices might be browser missing the feature that you need, due to a lack of community standardization
                        |  So do you support the feature, because after all most of you user base is on a legacy browser anyway.
                footer






        ui-slide.responsive-easier(items=".list li", notes=".notes li")
            hgroup
                h3 Responsive Design
                    span IS GETTING EASIER!
            article
                ul.list
                    li viewport units -
                        span  vh, vw, vmin, vmax
                    li flexbox
                    li grid layouts
                    li css feature detection -
                        span  @supports
                    li touch standardization
                    li advanced media queries -
                        span  pointer, luminosity
                    li new design paradigm -
                        span  offcanvas layouts
                ul.notes
                    li But its not all bad news, because we are still moving forward, It is getting easier
                    li New features such as viewport unit allowing us to focus on viewport percentages instead of pixel based restrictions.  This text should be 30% of the window height, we can do that now.
                    li Flexbox, argueably the most powerful css layout feature is finally standardized and implemented
                    li Grid Layout the other side of the layout arguement, allowing for grid like arrangements of content
                    li CSS feature detection! A css style for detecting out what features are supported, allowing you to provide a inline implementation fallback.
                    li And lots more, including new design paradigms, which really isn't a new feature, but a new way of interacting.
                    li Breaking the mold of what web ui is, have you ever been asked to put a tooltip in a lightbox, or a lightbox in another lightbox. It just feels wrong
                footer





         ui-slide.topics(backdrop="false", background="false", items="li.scale", vcenter="true")
            article
                ul
                    li.faded Responsive Design
                    li.scale RESS
                    li.faded Web Components





        ui-slide.responsive.ress(notes=".note")
            hgroup
                h3 Responsive Design + Server-Side Components
                    span RESS
            article
                img(data-src="images/mobile-first.png", title="Mobile First")
                p
                    | "RESS combines
                    b  adaptive layouts
                    |  with
                    b  server side component
                    |  optimization. So a single set of page templates define an entire site for all devices but key components have device specific implementations rendered server side.
                p
                    span.quoter - Luke Wroblewski
                p.note
                    | Base on print paradigms




        ui-slide.ress-your-server(items="span", notes=".notes li")
            article
                img.full(data-src="/images/your-server.jpg", alt="Your Server")
                div
                    span Server
                    span Waffle Concierge
                ul.notes
                    li Lets assume Bob is our server, and he has clients
                    li And Bob's job is to fullfill each of his clients requests





        ui-slide.ress-similiar-requests(items="span", notes=".notes li")
            article
                img.full(data-src="/images/similiar-requests.jpg", alt="Similiar Requests")
                h4
                    | clients make
                    b  similiar
                    |  yet
                    b  unique
                    |  requests
                span bacon
                    i  Waffle
                span chilli
                    i Waffle
                span chocolate
                    i Waffle
                span banana
                    i Waffle
                ul.notes
                    li So his clients go ahead an make their requests
                    li Each request being similiar, but not identical
                    li Bob wants to get to know his clientelle, so he asks his clients what they like




        ui-slide.ress-found-profile(notes=".notes li")
            article
                img.full(data-src="/images/found-profile.jpg", alt="Found Profile")
                h4
                    | server requests a
                    b  profile
                ul.notes
                    //- li And every once in a while he remembers what the client likes
                    li The server takes that request and attempts to match the client to a known profile
                    li Usually via a memory reference, a browser cookie
                    li But if no reference, he looks elsewhere, a database






        ui-slide.ress-unique-devices(items="span", notes=".notes li")
            article
                img.full(data-src="/images/unique-devices.jpg", alt="Unique Devices")
                h4
                    | containing an
                    b  unique
                    |  identifier
                div
                    span Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:23.0) Gecko/20100101 Firefox/23.0
                    span Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)
                ul.notes
                    li Looking within the profile for an unique identifier, the user agent, a name
                    li this smells familiar!






        ui-slide.ress-not-what-it-seems(notes=".notes li")
            article
                img.full(data-src="/images/not-what-it-seems.jpg", alt="Not What It Seems")
                div
                p
                    span USER AGENT ?
                    | REALLY?
                ul.notes
                    li Not browser sniffing, but using it as an identifier for querying
                    li its going to take the user agent and query a device database





        ui-slide.ress-sprinkle-magic(items="span",notes=".notes li")
            article
                img.full(data-src="/images/sprinkle-magic.jpg", alt="Sprinkle Magic")
                h4
                    | server applies its
                    b  secret
                    |  sauce
                div
                    span polyfill
                    span feature adapt
                    span bundle resources
                    span cache
                ul.notes
                    li If a match is found, then the server can use the model to determine which features to polyfill, include or omit.
                    li Determine which resources it should include, bundle and cache
                    li And fullfill the request





        ui-slide.ress-new-profile(items="span", notes=".notes li")
            article
                img.full(data-src="/images/new-profile.jpg", alt="Profile Not Found")
                h4
                    | no
                    b  profile?
                    |  make one!
                ul.notes
                    li But if a profile can't be found, then the server must build one.
                    li Defining a base profile that covers a basic experience





        ui-slide.ress-send-sample(items="span", notes=".notes li")
            article
                img.full(data-src="/images/send-sample.jpg", alt="Send Sample")
                h4
                    | server sends a
                    b  sample
                ul.notes
                    li The server sends a low level feature page
                    li One time cost to a single client





        ui-slide.ress-feature-testing
            article
                img.full(data-src="/images/feature-testing.jpg", alt="Feature Testing")
                h4
                    | with
                    b  feature
                    |  testing
                ul.notes
                    li One time cost in the sense that once the device/browser has been feature tested
                    li The results are returned to the server and cataloged for future requests from the same device
                    li This is an iterative process until a device can be successfully mapped




        ui-slide.ress
            hgroup
                h3 RESS
                    span DEVICE PROFILE
            article
                iframe.full(data-src=componentsHost+"/device", width="100%", height="100%")





        ui-slide.ress-request-fullfilled
            article
                img.full(data-src="/images/request-fullfilled.jpg", alt="Request Fullfilled")
                h4
                    b fullfilling
                    |  the request





        ui-slide.topics(backdrop="false", background="false", items="li.scale", vcenter="true")
            article
                ul

                    li.faded Responsive Design
                    li.faded RESS
                    li.scale Web Components






        ui-slide.components-whats-new(items="span", notes=".notes")
            article
                img.full(data-src="/images/whats-new.jpg", alt="What's New")
                h4 the new
                    b  building blocks
                    |  of the web
                div
                    span HTML Templates
                    span Shadow DOM
                    span Custom Elements
                    span HTML Imports
                div.notes comprised of 4 new features






        ui-slide.components(items=".list li", notes=".notes li")
            hgroup
                h3 Web Components
                    span HTML TEMPLATES
            article
                ui-code(title="html")
                    :code
                        <template>
                            <video width="320" height="240" controls>
                                <source src="demo.mp4" type="video/mp4">
                            </video>
                            <div class="comment"></div>
                        </template>
                ul.list
                    li contents hidden from DOM
                    li media not played
                    li stylesheets and images not loaded
                    li scripts not run
                ui.notes
                    li So this is what a html template looks like, very simple.
                    li It can be placed anywhere in the content head, body, tables even nested in selects
                    li Child nodes of template tags are hidden from DOM can not be traversed
                    li video won't play, images won't loaded, scripts won't run until activated
                    li templates can even have their own shadow dom






        ui-slide.components(notes=".notes li", items=".item", notes=".notes li")
            hgroup
                h3 Web Components
                    span HTML TEMPLATES
            article
                ui-code(title="html")
                    :code
                        <template>
                            <video width="320" height="240" controls>
                                <source src="demo.mp4" type="video/mp4">
                            </video>
                            <div class="comment"></div>
                        </template>
                div.item
                    ui-code(title="javascript")
                        :code
                            var content = document.querySelector('template').content;

                            content.querySelector('source').src = "newDemo.mp4";

                            document.body.appendChild(content.cloneNode(true));
                ul.notes
                    li query the template
                    li make modifications
                    li append it
                    li becomes live






        ui-slide.components(items=".browsers")
            article
                footer.footer-tall
                    h3 HTML Templates
                        span Browser Support
                    ul.browsers
                        li.icon-firefox
                            span 22
                            span.icon-mobile
                        li.icon-safari.unsupported
                        li.icon-chrome
                            span.icon-mobile
                        li.icon-opera
                            span 15
                            span.icon-mobile
                        li.icon-IE.unsupported






        ui-slide.components-shadow-dom(items=".item, .list li", notes=".notes li")
            hgroup
                h3 Web Components
                    span SHADOW DOM
            article

                input(type="text", placeholder="placeholder text")

                ui-code(title="html")
                    :code
                        <input type="text" placeholder="placeholder text">

                div.item
                    ui-code(title="rendered html")
                        :code
                            <input type="text" placeholder="placeholder text">
                                #document-fragment
                                    <div></div>
                                    <div pseudo="-webkit-input-placeholder" style="visibility: visible; text-overflow: clip;">placeholder text</div>
                            </input>
                ul.list
                    li hidden DOM can not be accessed from outside javascript
                    li can be styled by @host css and pseudo selectors
                    li insertion points
                ul.notes
                    li we have been secretly exposed to this
                    li allows to encapsulate styles and markup
                    li can still be styled via host and specialized pseudo selectors
                    li and even allows for content arrangement







        ui-slide.components-shadow-dom(items="div", notes=".note")
            hgroup
                h3 Web Components
                    span SHADOW DOM
            article
                ui-code(title="html")
                    :code
                        <div id="host">
                            <h1>Heading</h1>
                        </div>
                div
                    ui-code(type="javascript", title="javascript")
                        :code
                            var host = document.querySelector('#host'),
                                shadow = host.createShadowRoot(), // prefixed
                                p = document.createElement('p');

                            p.textContent = 'paragraph content';
                            shadow.appendChild(p);
                div
                    ui-code(title="rendered html")
                        :code
                            <div id="host">
                                <h1>Heading</h1>
                                #document-fragment
                                    <p>paragraph content</p>
                            </div>
                span.note much more to the spec, recommend reading Eric Bidelmans talk over at htmlrocks.com






        ui-slide.components(items=".browsers")
            article
                footer.footer-tall
                    h3 Shadow DOM
                        span Browser Support
                    ul.browsers
                        li.icon-firefox.unsupported
                        li.icon-safari.unsupported
                        li.icon-chrome
                            span.icon-mobile
                        li.icon-opera
                            span 15
                            span.icon-mobile
                        li.icon-IE.unsupported





        ui-slide.components(items=".list li", notes=".notes li")
            hgroup
                h3 Web Components
                    span CUSTOM ELEMENTS
            article
                div
                    ui-code
                        :code
                            <element name="foo">
                                <script>
                                    this.register({
                                        prototype: {
                                            readyCallback: function() { ...  },
                                            more: function(){
                                                console.log('more foo');
                                            }
                                        }
                                    });
                                </script>
                            </element>
                ul.list
                    li can extend other elements
                    li lifecycle callbacks
                ul.notes
                    li custom element is an developer created html element that inherits from other core html elements
                    li it contains events/api which are fired throughout its lifecycle
                    li and its prototype can be extended with more methods and apis






        ui-slide.components(items="div", notes=".notes li")
            hgroup
                h3 Web Components
                    span CUSTOM ELEMENTS
            article

                ui-code
                    :code
                        <element name="foo" constructor="Foo">
                            <script>
                                this.register({
                                    prototype: {
                                        readyCallback: function() { ... },
                                        more: function() { ... }
                                    }
                                });
                            </script>
                        </element>
                div
                    ui-code(title="html")
                        :code
                            <foo></foo>
                div
                    ui-code(title="javascript")
                        :code
                            var foo = document.createElement('foo');
                            foo.more(); // more method is executed
                div
                    ui-code(title="javascript")
                        :code
                            var foo = new Foo();
                            document.body.appendChild(foo);
                ul.notes
                    li can be created as an element
                    li with document.createElement
                    li or with constructor





        ui-slide.components(items=".browsers")
            article
                footer.footer-tall
                    h3 Custom Elements
                        span Browser Support
                    ul.browsers
                        li.icon-firefox
                        li.icon-safari.unsupported
                        li.icon-chrome
                        li.icon-opera
                            span 15
                        li.icon-IE.unsupported





        ui-slide.components(notes=".notes li", items="div")
            hgroup
                h3 Web Components
                    span HTML IMPORTS
            article
                ui-code(title="index.html")
                    :code
                        <!DOCTYPE html>
                        <html>
                            <head>
                                <link rel="import" href="foo.html">
                            </head>
                            <body>
                                <foo></foo> <!-- element definition loaded from foo.html-->
                            </body>
                        </html>
                ul.notes
                    li allows us to include and reuse html documents within our html documents
                    li can be used with custom elements, shadow and templates







        ui-slide.components(notes=".notes li", items="div")
            hgroup
                h3 Web Components
                    span HTML IMPORTS
            article
                ui-code(title="index.html")
                    :code
                        <link rel="import" href="foo.html">
                        <foo></foo> <!-- element definition loaded from foo.html-->
                div
                    ui-code(title="foo.html")
                        :code
                            <link rel="import" href="bar.html">
                            <link rel="import" href="baz.html">

                            <element name="foo">
                                <template>
                                    <bar>foo-bar</bar>
                                    <baz>foo-baz</baz>
                                </template>
                                <script>
                                    this.register({
                                        prototype: { ... }
                                    });
                                </script>
                            </element>
                ul.notes
                    li can even nest imports




         ui-slide.components(items=".browsers")
            article
                footer.footer-tall
                    h3 HTML Imports
                        span Browser Support

                    ul.browsers
                        li.icon-firefox.unsupported
                        li.icon-safari.unsupported
                        li.icon-chrome.unsupported
                        li.icon-opera.unsupported
                        li.icon-IE.unsupported




        ui-slide.components-implement(notes=".notes li")
            article
                img.full(data-src="/images/implement.jpg", alt="Limited Support")
                h4
                    | very
                    b  limited
                    |  browser support!
                ul.notes
                    li So with such limited support why should we even bother implementing?




        ui-slide.components-polymer(notes=".notes li")
            article
                img.full(data-src="/images/polymer.png", alt="Polymer Project")
                h4 web components polyfills + other goodies






        ui-slide.components(items=".browsers")
            article
                footer.footer-tall
                    h3 WEB COMPONENTS
                        span Browser Polyfill Support
                    ul.browsers
                        li.icon-firefox
                        li.icon-safari
                            span.icon-mobile
                        li.icon-chrome
                            span.icon-mobile
                        li.icon-opera
                            span.icon-mobile
                        li.icon-IE





        ui-slide.topics(backdrop="false", background="false", vcenter="true")
            article
                ul
                    li.finale Demos





        ui-slide.demo
            article
                iframe(data-src="http://localhost:3001/demo/slides", width="100%", height="100%")





        ui-slide.demo(notes=".notes li")
            article
                iframe(data-src="http://localhost:3001/demo/slides-final", width="100%", height="100%")





        ui-slide.ress
            hgroup
                h3 RESS
                    span DEVICE PROFILE
            article
                iframe.full(data-src=componentsHost+"/device", width="100%", height="100%")





        ui-slide.demo(notes=".notes li")
            article
                iframe(data-src="http://localhost:3001/demo/slides-final", width="100%", height="100%")





        //- ui-slide.demo(notes=".notes li")
        //-     article
        //-         iframe(data-src="http://localhost:3001/demo/offcanvas", width="100%", height="100%")


        //- ui-slide.demo(notes=".notes li")
        //-     article
        //-         iframe(data-src="http://localhost:3001/demo/offcanvas-final", width="100%", height="100%")






        ui-slide.thank-you(vcenter="true")
            article
                div
                    h1
                        | Thank You
                ul
                    li.icon-twitter @filipearaujo
                        span #ressponents
                    li.icon-github github.com/filaraujo
                span #webponents